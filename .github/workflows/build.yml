name: Test armv7l cpu option
on:
  push:
    branches:
      - 'main'
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  GO_VERSION: 1.20.5
  GO_CV_TAG: v0.33.0

jobs:
  create_image:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [2023-05-03-raspios-bullseye-armhf-lite]
        include:
        - target: 2023-05-03-raspios-bullseye-armhf-lite
          cpu: cortex-a8
          cpu_info: cpuinfo/raspberrypi_zero2_w
          base_image: https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2023-05-03/2023-05-03-raspios-bullseye-armhf-lite.img.xz
    steps:
      - name: Define the image name
        id: image_and_branch_name
        run: |
          if [ ${GITHUB_REF/refs\/tags\//} != ${GITHUB_REF} ]; then
            echo "INFO: ${GITHUB_REF/refs\/tags\//}" " not equal " "${GITHUB_REF}"
            echo "LOCAL_BRANCH=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
            echo "IMAGE_NAME_SUFFIX=${GITHUB_REF/refs\/tags\//}-${{ matrix.target }}" >> $GITHUB_OUTPUT
          #  echo "CLONE_RELEASE=yes" >> $GITHUB_OUTPUT
          elif [ ${GITHUB_REF/refs\/heads\//} = "releng" ]; then
            echo "INFO: ${GITHUB_REF/refs\/heads\//} equals releng"
            echo "LOCAL_BRANCH=releng" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=releng" >> $GITHUB_OUTPUT
            echo "IMAGE_NAME_SUFFIX=releng-${{ matrix.target }}" >> $GITHUB_OUTPUT
          #  echo "CLONE_RELEASE=yes" >> $GITHUB_OUTPUT
          elif [ ${GITHUB_REF/refs\/heads\//} != "${GITHUB_REF}" ]; then
            echo "INFO: ${GITHUB_REF/refs\/heads\//}" " not equals " "${GITHUB_REF}"
            echo "LOCAL_BRANCH=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_OUTPUT
            echo "IMAGE_NAME_SUFFIX=${GITHUB_REF/refs\/heads\//}-${{ matrix.target }}" >> $GITHUB_OUTPUT
          #  echo "CLONE_RELEASE=yes" >> $GITHUB_OUTPUT
          else
            echo "INFO: ${GITHUB_REF}" 
            echo "LOCAL_BRANCH=${GITHUB_REF}" >> $GITHUB_OUTPUT
            echo "IMAGE_NAME_SUFFIX=${GITHUB_REF//\//-}-${{ matrix.target }}" >> $GITHUB_OUTPUT
          #  echo "CLONE_RELEASE=no" >> $GITHUB_OUTPUT
          fi
      
      - name: Build gocv
        uses: pguyot/arm-runner-action@v2
        id: arm_runner_install
        with:
          image_additional_mb: 5120
          base_image: ${{ matrix.base_image }}
          cpu: ${{ matrix.cpu }}
          cpu_info: ${{ matrix.cpu_info }}
          optimize_image: yes
          commands: |
            sudo apt-get update -y && apt-get install -y git
            echo "installing go"
            curl -s https://dl.google.com/go/go$GO_VERSION.linux-armv6l.tar.gz | sudo tar -C /usr/local -xz
            export PATH=$PATH:/usr/local/go/bin
            echo "installing opencv"
            mkdir -p /home/pi/src
            cd /home/pi/src
            git clone https://github.com/hybridgroup/gocv.git
            cd gocv
            git config --local advice.detachedHead false
            git checkout tags/$GO_CV_TAG
            make install_raspi

      - name: Compress the release image
        run: |
          mv ${{ steps.arm_runner_install.outputs.image }} gocv-$GO_CV_TAG-${{ steps.image_and_branch_name.outputs.IMAGE_NAME_SUFFIX }}.img
          sudo xz -T 0 -v gocv-$GO_CV_TAG-${{ steps.image_and_branch_name.outputs.IMAGE_NAME_SUFFIX }}.img
    
      - name: Upload the image artifact
        uses: actions/upload-artifact@v3
        with:
          name: gocv-${{ env.GO_CV_TAG }}-${{ steps.image_and_branch_name.outputs.IMAGE_NAME_SUFFIX }}.img.xz
          path: gocv-${{ env.GO_CV_TAG }}-${{ steps.image_and_branch_name.outputs.IMAGE_NAME_SUFFIX }}.img.xz
          if-no-files-found: error
          retention-days: 1

  create_release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - create_image
    if: github.ref == 'refs/heads/releng' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Define the release name
        id: release_name
        run: |
          if [ ${GITHUB_REF/refs\/tags\//} != ${GITHUB_REF} ]; then
             echo "RELEASE_NAME=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
          elif [ ${GITHUB_REF/refs\/heads\//} = "releng" ]; then
             echo "RELEASE_NAME=releng" >> $GITHUB_OUTPUT
          else
             echo "RELEASE_NAME=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_OUTPUT
          fi

      - name: Download the image artifacts
        uses: actions/download-artifact@v3

      - name: Create release with releng image
        if: github.ref == 'refs/heads/releng'
        uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          draft: true
          title: "Prerelease"
          files: gocv-${{ env.GO_CV_TAG }}-${{ steps.release_name.outputs.RELEASE_NAME }}-*.img.xz/gocv-${{ env.GO_CV_TAG }}-${{ steps.release_name.outputs.RELEASE_NAME }}-*.img.xz

      - name: Create release with release image
        if: startsWith(github.ref, 'refs/tags/')
        uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ steps.release_name.outputs.RELEASE_NAME }}
          prerelease: false
          draft: true
          title: ${{ steps.release_name.outputs.RELEASE_NAME }}
          files: gocv-${{ env.GO_CV_TAG }}-${{ steps.release_name.outputs.RELEASE_NAME }}-*.img.xz/gocv-${{ env.GO_CV_TAG }}-${{ steps.release_name.outputs.RELEASE_NAME }}-*.img.xz

